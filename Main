<!DOCTYPE html>
<html>
<head>
  <title>Parsons Problem with Indentation</title>
  <style>
    .container { display: flex; gap: 20px; }
    .box { border: 1px solid #ccc; padding: 10px; width: 45%; min-height: 200px; }
    .line { 
      background: #f0f0f0; 
      margin: 5px; 
      padding: 5px; 
      cursor: grab; 
      display: flex; 
      align-items: center; 
      justify-content: space-between;
    }
    .code-text {
      flex-grow: 1;
      white-space: pre;
    }
    .indent-btns {
      display: flex;
      gap: 5px;
    }
    button.small {
      font-size: 0.8em;
      padding: 2px 6px;
    }
  </style>
</head>
<body>

<h2>Reorder and indent the lines to make the code work</h2>

<div class="container">
  <div class="box" id="choices"></div>
  <div class="box" id="workspace"></div>
</div>

<button onclick="checkAnswer()">Check</button>
<p id="result"></p>

<script>
  // Correct solution: list of objects with indent level and text
  const correctLines = [
    { indent: 0, text: "def greet():" },
    { indent: 1, text: "print('Hello!')" },
    { indent: 0, text: "greet()" }
  ];

  // Create a draggable line element with indentation buttons
  function createLineElement(text, id) {
    const lineDiv = document.createElement("div");
    lineDiv.className = "line";
    lineDiv.draggable = true;
    lineDiv.id = id;
    lineDiv.dataset.indent = 0; // Start with zero indent

    // Code text span
    const codeSpan = document.createElement("span");
    codeSpan.className = "code-text";
    codeSpan.textContent = text;
    lineDiv.appendChild(codeSpan);

    // Indentation buttons container
    const btnContainer = document.createElement("div");
    btnContainer.className = "indent-btns";

    // Indent button
    const indentBtn = document.createElement("button");
    indentBtn.className = "small";
    indentBtn.textContent = "➕";
    indentBtn.onclick = (e) => {
      e.stopPropagation(); // Prevent drag start
      adjustIndent(lineDiv, +1);
    };

    // Unindent button
    const unindentBtn = document.createElement("button");
    unindentBtn.className = "small";
    unindentBtn.textContent = "➖";
    unindentBtn.onclick = (e) => {
      e.stopPropagation();
      adjustIndent(lineDiv, -1);
    };

    btnContainer.appendChild(indentBtn);
    btnContainer.appendChild(unindentBtn);
    lineDiv.appendChild(btnContainer);

    // Drag start event
    lineDiv.addEventListener("dragstart", (e) => {
      e.dataTransfer.setData("text/plain", lineDiv.id);
    });

    return lineDiv;
  }

  // Change indentation by adjusting margin and dataset
  function adjustIndent(lineDiv, change) {
    let indent = parseInt(lineDiv.dataset.indent);
    indent = Math.max(0, indent + change);
    lineDiv.dataset.indent = indent;
    const codeSpan = lineDiv.querySelector(".code-text");
    codeSpan.style.marginLeft = `${indent * 20}px`; // 20px per indent level
  }

  // Shuffle correct lines and add to choices box
  const shuffled = [...correctLines].sort(() => Math.random() - 0.5);
  const choicesBox = document.getElementById("choices");

  shuffled.forEach((line, idx) => {
    const lineDiv = createLineElement(line.text, "line-" + idx);
    choicesBox.appendChild(lineDiv);
  });

  // Setup drag and drop for choices and workspace
  const workspace = document.getElementById("workspace");
  [choicesBox, workspace].forEach(box => {
    box.addEventListener("dragover", (e) => e.preventDefault());
    box.addEventListener("drop", (e) => {
      e.preventDefault();
      const id = e.dataTransfer.getData("text/plain");
      const dragged = document.getElementById(id);
      box.appendChild(dragged);
    });
  });

  // Check if the workspace lines match the correct order and indentation
  function checkAnswer() {
    const studentLines = Array.from(workspace.children).map(div => {
      return {
        indent: parseInt(div.dataset.indent),
        text: div.querySelector(".code-text").textContent.trim()
      };
    });

    const result = document.getElementById("result");

    const correct = studentLines.length === correctLines.length &&
      studentLines.every((line, i) =>
        line.text === correctLines[i].text &&
        line.indent === correctLines[i].indent
      );

    result.textContent = correct ? "✅ Correct!" : "❌ Try again.";
  }
</script>

</body>
</html>
